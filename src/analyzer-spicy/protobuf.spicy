module PROTOBUF;
import spicy;

# See Protobuf encoding at https://protobuf.dev/programming-guides/encoding/
type WireType = enum {
    VARINT = 0 ,
    I64 = 1,
    LEN = 2,
    SGROUP = 3,
    EGROUP = 4,
    I32 = 5
};


# TODO: Reconsider whether to use VarintSegment or deal with bytes instead
# Segment is 8-bit. 0..6 are a part of the value, 7 is a flag to indicate last segment.
type VarintSegment  = unit {
    f: bitfield(8) {
        data: 0..6 &convert=cast<uint8>($$);
        is_last: 7 &convert=cast<bool>($$); 
    } ;
};

type Varint = unit {
    segments: VarintSegment[]  &until-including=( ! $$.f.is_last );
    on segments { 
        # self.value is computed based on segments
        local i : uint8  = 0;
        local c : uint64 = 0; 
        local n : uint64 = 0;
        local o : uint8;
        while (i < |$$| ) {
            c = $$[i].f.data ;
            o = i * 7;
            n = n | (c << o);
            i++;
        }
        self.value = n;
    }

    var value: uint64 &optional;

} &convert=self.value;

# https://protobuf.dev/programming-guides/encoding/#structure
# tag is a varint encoded value where 3 lower bits are wire_type and remaining bits are field number
type Tag = unit {

    varint: Varint ;

    var field_number: uint64 &optional;
    var wire_type: WireType &optional;

    on varint {  
        self.field_number = $$ >> 3;
        self.wire_type = WireType(($$ << 61) >> 61);
     }

     on %done {
        print "field_number:%s wire_type:%s" % ( self.field_number, self.wire_type ) ;
     }

};

type SubMessage = unit {
    
    fields : Field[];

    var start: iterator<stream>;

    on %init() { self.start = self.input(); }

    on %error(msg: string) { 
        self.set_input(self.start);
    }
};

type LengthPrefixed = unit {

    size: Varint ;
    sub_message: SubMessage;
    text: bytes &requires=( self.size > 0 ) &size=self.size;

    on %done {
        print "Text=%s" % ( self.text );
        print "SubMessage=%s" % ( self.sub_message );
    }
};

type Field = unit {

    tag: Tag;
    switch ( self.tag.wire_type ) { 
        WireType::VARINT -> varint: Varint;
        WireType::I64    -> i64: bytes &size=8 ;
        WireType::LEN    -> len: LengthPrefixed ;
        #WireType::SGROUP -> sgroup: SGroup ;
        #WireType::EGROUP -> egroup: EGroup ;
        WireType::I32    -> i32: bytes &size=4 ;
    };

};

public type Message = unit {

    fields : Field[];

};
