module PROTOBUF;

import spicy;

# See Protobuf encoding at https://protobuf.dev/programming-guides/encoding/

# Segment is 8-bit. 0..6 are a part of the value, 7 is a flag to indicate last segment.
public type VarIntSegment  = unit {
    f: bitfield(8) {
        data: 0..6 &convert=cast<uint8>($$);
        is_last: 7 &convert=cast<bool>($$); 
    } ;
};

# https://protobuf.dev/programming-guides/encoding/#varints
public type VarInt = unit {
    # &max-size=10 
    segments: VarIntSegment[] &until-including=( ! $$.f.is_last ) { 
        # self.value is computed based on segments
        local i : uint8  = 0;
        local c : uint64 = 0; 
        local n : uint64 = 0;
        local o : uint8;
        while (i < |$$| ) {
            c = $$[i].f.data ;
            o = i * 7;
            n = n | (c << o);
            # print "c=0x%x n=0x%x o=%d" % (c,n,o);

            i++;
        }
        # print n;
        self.value = n;
    }

    var value: uint64 &optional;

    on %done { print self; }
} &convert=self.value;

# https://protobuf.dev/programming-guides/encoding/#structure
# tag is a varint encoded value where 3 lower bits are wire_type and remaining bits are field number
public type Tag = unit {
    varint: VarInt {  
        self.field_number = $$ >> 3;
        self.wire_type = cast<uint8>(($$ << 61) >> 61);
     }

    var field_number: uint64 &optional;
    var wire_type: uint8 &optional;

    on %done { print self; }
};